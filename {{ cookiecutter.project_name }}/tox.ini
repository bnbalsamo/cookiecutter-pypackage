[tox]
envlist = py37,flake8,pylint,pydocstyle,isort,bandit,checkdeps_requirements.txt,checkdeps_install,docs,checkmanifest

[travis]
python = 
    3.7: py37,flake8,pydocstyle,bandit,isort,docs,checkmanifest
    3.6: py36
    3.5: py35
    3.4: py34
    2.7: py27

[testenv]
description = Run unit tests
deps =
    -rrequirements/requirements_tests.txt
commands =
    pip freeze
    pytest {posargs:--cov={{ cookiecutter.slug_name}}}

[testenv:flake8]
description = Lint the code and tests
skip_install = true
deps =
    flake8
commands =
    flake8 {posargs:{{ cookiecutter.slug_name }} tests}

[testenv:pylint]
description = Run pylint against the code
skip_install = true
deps =
    pylint
    -rrequirements.txt
commands = 
    pylint {posargs:{{ cookiecutter.slug_name }}}

[testenv:pydocstyle]
description = Check docstrings
skip_install = true
deps =
    pydocstyle
commands = 
    pydocstyle {posargs:{{ cookiecutter.slug_name }}}

[testenv:bandit]
description = Security static analysis
skip_install = true
deps =
    bandit
commands =
    bandit {posargs:-r {{ cookiecutter.slug_name }}}

[testenv:checkdeps_requirements.txt]
description = Check dependency versions in requirements.txt
skip_install = true
deps =
    safety
commands =
    safety check {posargs:-r requirements.txt}

[testenv:checkdeps_install]
description = Check dependency versions in a basic install (eg: from pip)
deps =
    safety
commands =
    safety check {posargs}

[testenv:isort]
description = Sort import statements
skip_install = true
deps =
    isort
commands =
    isort {posargs:--diff -rc -c {{ cookiecutter.slug_name }}}

[testenv:docs]
description = Build sphinx documentation
deps =
    -rrequirements/requirements_docs.txt
commands =
    sphinx-build -d "{toxworkdir}/docs_doctree" docs "{toxworkdir}/docs_out" --color -W -bhtml {posargs}
    python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "docs_out" / "index.html"))'

[testenv:checkmanifest]
description = Check the MANIFEST.in
deps = 
    check-manifest
commands = 
    check-manifest {posargs}

[testenv:pindeps]
description = Produce pinned requirements.txt
recreate = true
deps = -rrequirements/requirements_loose.txt
commands =
    python -c 'import pathlib, datetime; from pip._internal.operations import freeze; x = freeze.freeze(skip=["{{ cookiecutter.slug_name }}", "pip", "setuptools", "wheel"]); f = open(pathlib.Path(r"{toxworkdir}") / "requirements.txt", "w"); f.write("# Pinned on " + datetime.datetime.today().strftime("%Y-%m-%d") + "\n"); [f.write(p+"\n") for p in x]'
    python -c 'import pathlib; print("pinned requirements.txt available under file://\{0\} - Move it into the project root.".format(pathlib.Path(r"{toxworkdir}") / "requirements.txt"))'
