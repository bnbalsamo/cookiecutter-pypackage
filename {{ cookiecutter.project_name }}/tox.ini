[tox]
envlist = py38,py37,py36,pinned_deps,flake8,pylint,pydocstyle,check_isort,check_black,bandit,checkdeps_requirements.txt,checkdeps_install,docs,checkmanifest,mypy,interrogate,interrogate_tests,build
isolated_build_env = true

[gh-actions]
python =
    3.8: py38,pinned_deps,flake8,pydocstyle,bandit,check_isort,check_black,docs,checkmanifest,mypy,interrogate,interrogate_tests,build
    3.7: py37,checkdeps_install,build
    3.6: py36,checkdeps_install,build


[testenv]
description = Run unit tests
extras = tests
commands_pre = python -m pip install --progress-bar off -U pip setuptools wheel
commands =
    python -m pip freeze
    pytest {posargs:--cov={{ cookiecutter.module_name}}}

[testenv:pinned_deps]
description = Run unit tests using pinned dependencies
deps =
    -rrequirements.txt
commands =
    python -m pip freeze
    pytest {posargs:--cov={{ cookiecutter.module_name}}}

[testenv:mypy]
description = Typecheck the code
deps =
    mypy
extras =
commands =
    python -m mypy src

[testenv:flake8]
description = Lint the code and tests
skip_install = true
deps =
    flake8
commands =
    python -m flake8 {posargs:src tests}

[testenv:pylint]
description = Run pylint against the code
deps =
    isort[pyproject] >= 5.0.2
    pylint >= 2.6.0
extras =
commands =
    python -m pylint {posargs:src/{{ cookiecutter.module_name }}}

[testenv:pydocstyle]
description = Check docstrings
skip_install = true
deps =
    pydocstyle
commands =
    python -m pydocstyle {posargs:src tests}

[testenv:bandit]
description = Security static analysis
skip_install = true
deps =
    bandit
commands =
    python -m bandit {posargs:-r src}

[testenv:checkdeps_requirements.txt]
description = Check dependency versions in requirements.txt
skip_install = true
deps =
    safety
commands =
    python -m safety check {posargs:-r requirements.txt}

[testenv:checkdeps_install]
description = Check dependency versions in a basic install (eg: from pip)
deps =
    safety
extras =
commands =
    python -m safety check {posargs}

[testenv:check_isort]
description = Check sorting of import statements
deps =
    isort[pyproject] >= 5.0.2
extras =
commands =
    python -m isort --diff -c {posargs:--diff src tests}

[testenv:check_black]
description = Check code formatting
skip_install = true
deps =
    black
commands =
    python -m black --diff --check {posargs:src tests}

[testenv:docs]
description = Build sphinx documentation
extras = docs
commands =
    sphinx-build -d "{toxworkdir}/docs_doctree" docs "{toxworkdir}/docs_out" --color -W -bhtml {posargs}

[testenv:checkmanifest]
description = Check the MANIFEST.in
deps =
    check-manifest
extras =
commands =
    python -m check_manifest {posargs}

[testenv:pindeps]
description = Produce pinned requirements.txt
extras =
recreate = true
commands =
    python -c 'import datetime; from pip._internal.operations import freeze; x = freeze.freeze(skip=["{{ cookiecutter.pip_name }}", "pip", "setuptools", "wheel", "distribute"]); f = open("requirements.txt", "w"); f.write("# Pinned on " + datetime.datetime.today().strftime("%Y-%m-%d") + "\n"); [f.write(p+"\n") for p in x]'

[testenv:interrogate]
description = Check docstring coverage of code
skip_install = true
deps =
    interrogate
commands =
    interrogate -vv {posargs:src}

[testenv:interrogate_tests]
description = Check docstring coverage of tests
skip_install = true
deps =
    interrogate
commands =
    interrogate -vv --fail-under 100 --whitelist-regex "test_.*" tests

[testenv:build]
description = Check the package builds
skip_install = true
deps =
    build
    twine
commands =
    python -m build -s -w .
    python -m twine check dist/*
