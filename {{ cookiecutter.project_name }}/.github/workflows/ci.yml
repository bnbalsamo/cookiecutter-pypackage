{%- raw -%}
---
name: Test (maybe release)

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  release:
    types: [published]
  workflow_dispatch:

# Required for gh-pages
permissions:
  contents: write

env:
  LATEST_PYTHON: "3.11"  # Keep in sync w/ noxfile.py + test matrix.

jobs:
  # If the package becomes py version/platform dependent swap w/ cibuildlwheel
  # (and add platforms to the test matrix)
  build-package:
    name: Build & Verify Package
    runs-on: "ubuntu-latest"  # Default platform
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v1

  lint:
    runs-on: "ubuntu-latest"
    needs: build-package
    steps:
      - uses: "actions/checkout@v3"
      - name: Download Built Packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - run: |
          python -Im pip install nox
      - name: Run Linters
        run: |
          python -Im nox -e lint

  docs:
    runs-on: "ubuntu-latest"
    needs: build-package
    steps:
      - uses: "actions/checkout@v3"
      - name: Download Built Packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - run: |
          python -Im pip install nox
      - name: Build Docs
        run: |
          NOX_USE_WHEEL=1 python -Im nox -e docs

  test:
    strategy:
      fail-fast: false
      matrix:
        # Keep this in sync w/ the noxfile
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    runs-on: "ubuntu-latest"
    needs: build-package
    steps:
      - uses: "actions/checkout@v3"
      - name: Download Built Packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          python -Im pip install nox
      - name: Run Tests
        run: |
          NOX_USE_WHEEL=1 python -Im nox -e test
      - name: Upload Coverage Data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    needs: test
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - run: python -Im pip install --upgrade coverage[toml]
      - name: Download Coverage Data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data
      - name: Combine Coverage and Report
        run: |
          python -Im coverage combine
          python -Im coverage report
      - name: Upload HTML Report If Check Failed
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  # If this is a release publish...
  release-pypi:
    name: Publish Package to PyPI
    if: github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: ["test", "coverage", "docs", "lint"]

    steps:
      - name: Download Built Packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist

      - name: Upload Package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

  release-docs:
    name: Publish Updated Docs
    if: github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: ["release-pypi"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build Docs Environment and Publish
        run: |
          python -m pip install -r requirements/doc_requirements.txt
          python -m pip install .
          python -m mkdocs gh-deploy --force
{% endraw %}